@model ServiPuntosUyAdmin.Models.ServiceEditViewModel
@{
  Layout = "_Layout";
}

<h2>Editar Servicio</h2>

@using (Html.BeginForm()) {
  @Html.AntiForgeryToken()
  @Html.HiddenFor(m => m.Id)
  @Html.HiddenFor(m => m.BranchId)

  <div class="form-group">
    @Html.LabelFor(m => m.Name)
    @Html.TextBoxFor(m => m.Name, new { @class = "form-control", required = "required" })
    @Html.ValidationMessageFor(m => m.Name, "", new { @class = "text-danger" })
  </div>

  <div class="form-group">
    @Html.LabelFor(m => m.Description)
    @Html.TextAreaFor(m => m.Description, new { @class = "form-control", rows = 3 })
  </div>

  <div class="form-group">
    @Html.LabelFor(m => m.Price)
    @Html.TextBoxFor(m => m.Price, new { @class = "form-control", type = "number", step = "0.01", required = "required" })
    @Html.ValidationMessageFor(m => m.Price, "", new { @class = "text-danger" })
  </div>

  <div class="form-group form-check">
    @Html.CheckBoxFor(m => m.AgeRestricted, new { @class = "form-check-input" })
    @Html.LabelFor(m => m.AgeRestricted, htmlAttributes: new { @class = "form-check-label" })
  </div>

  <div class="form-group">
    @Html.LabelFor(m => m.StartTime)
    @Html.TextBoxFor(m => m.StartTime, new { @class = "form-control", type = "time", required = "required" })
    @Html.ValidationMessageFor(m => m.StartTime, "", new { @class = "text-danger" })
  </div>

  <div class="form-group">
    @Html.LabelFor(m => m.EndTime)
    @Html.TextBoxFor(m => m.EndTime, new { @class = "form-control", type = "time", required = "required" })
    @Html.ValidationMessageFor(m => m.EndTime, "", new { @class = "text-danger" })
  </div>

  <button type="submit" class="btn btn-primary">Actualizar</button>
  <a asp-action="Index" class="btn btn-secondary">Cancelar</a>
}

@section Scripts {
  @{ 
    // Esto ejecuta el partial y no intenta renderizar su "return" (que es void)
    await Html.RenderPartialAsync("_ValidationScriptsPartial"); 
  }
}
