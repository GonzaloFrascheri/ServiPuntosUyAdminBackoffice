@model ServiPuntosUyAdmin.Models.FuelPriceViewModel
@{
    Layout = "_Layout";
}

<h2>Editar precio</h2>

@if (TempData["Success"] != null)
{
    <div class="alert alert-success" id="successMsg">@TempData["Success"]</div>
    <script>
        setTimeout(() => {
            const el = document.getElementById('successMsg');
            if(el) el.style.display = 'none';
        }, 3000);
    </script>
}

@if (TempData["Error"] != null)
{
    <div class="alert alert-danger" id="errorMsg">@TempData["Error"]</div>
    <script>
        setTimeout(() => {
            const el = document.getElementById('errorMsg');
            if(el) el.style.display = 'none';
        }, 4000); // el error lo dejamos 4 segundos por ejemplo
    </script>
}

@* Le digo exactamente a qué acción y controlador voy, y paso el fuelType *@
@using (Html.BeginForm(
           actionName: "Edit",
           controllerName: "Fuel",
           routeValues: new { id = Model.FuelType },
           method: FormMethod.Post))
{
    @Html.AntiForgeryToken()
    @* por si acaso, metemos el fuelType también en un hidden *@
    @Html.HiddenFor(m => m.FuelType)

    <div class="form-group">
      <label>Precio</label>
      @Html.TextBoxFor(m => m.Price, new {
          @class = "form-control",
          type      = "number",
          step      = "0.01",
          required  = "required"
      })
      @Html.ValidationMessageFor(m => m.Price, "", new { @class = "text-danger" })
    </div>

    <button type="submit" class="btn btn-primary">Guardar</button>
    <a asp-action="Index" asp-controller="Fuel" class="btn btn-secondary">Cancelar</a>
}

@section Scripts {
  <script>
    // que el flash desaparezca solo
    setTimeout(() => {
      const f = document.getElementById('flashSuccess');
      if (f) f.remove();
    }, 3000);
  </script>
}
