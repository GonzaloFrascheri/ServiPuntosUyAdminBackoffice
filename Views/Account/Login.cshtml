@{
    ViewData["Title"] = "Admin Login";
}
@if (ViewBag.DebugMeBody != null)
{
    <div class="alert alert-warning">
        <b>DEBUG:</b>
        <pre>@ViewBag.DebugMeBody</pre>
    </div>
}
@if (TempData["Success"] != null)
{
    <div class="alert alert-success">@TempData["Success"]</div>
}

<link rel="stylesheet" href="~/css/auth.css" />

<div class="admin-auth-card">
    <div class="admin-auth-header">
        <span class="admin-badge">ADMIN</span>
        <h2 id="form-title">Panel de Administración</h2>
    </div>
    @if (ViewBag.Error != null)
    {
        <div class="admin-auth-error">@ViewBag.Error</div>
    }
    <form asp-action="Login" method="post" class="admin-auth-form" id="authForm">
        <!-- Combo de tipo de usuario -->
        <select name="userType" id="userTypeSelect" class="admin-auth-input" required>
            <option value="Central">Admin Central</option>
            <option value="Tenant">Admin Tenant</option>
            <option value="Branch">Admin Branch</option>
        </select>

        <!-- TENANT: ahora un <select> poblado via fetch -->
        <select name="tenantName" id="tenantNameSelect" class="admin-auth-input" style="display:none;" required>
            <option value="">Seleccioná tu Tenant</option>
        </select>

        <input type="email" name="email" placeholder="Email" required class="admin-auth-input" />
        <input type="password" name="password" placeholder="Contraseña" required class="admin-auth-input" />
        
        <!-- Campo Nombre solo para Registro -->
        <input type="text" name="name" placeholder="Nombre" class="admin-auth-input" style="display:none" id="nameInput" />

        <button type="submit" class="admin-auth-btn" id="submitBtn">Ingresar</button>
    </form>
    <div class="admin-auth-divider">Acceso exclusivo para administradores</div>
</div>

<script>
document.addEventListener('DOMContentLoaded', function () {
    const userTypeSelect    = document.getElementById('userTypeSelect');
    const tenantNameSelect  = document.getElementById('tenantNameSelect');

    // Función que muestra/oculta el select de tenant y lo popula cuando es necesario
    function handleUserTypeChange() {
        const ut = userTypeSelect.value;
        if (ut === 'Tenant' || ut === 'Branch') {
            tenantNameSelect.style.display = '';
            tenantNameSelect.required     = true;

            // Solo cargamos una vez (si aún no hay más de 1 opción)
            if (tenantNameSelect.options.length <= 1) {
                fetch('http://localhost:5162/api/public/tenant', { mode: 'cors' })
                  .then(resp => {
                    if (!resp.ok) throw new Error(`HTTP ${resp.status}`);
                    return resp.json();
                  })
                  .then(result => {
                    // result tiene la forma { error, data: [ { id, name }, ... ], message }
                    (result.data || []).forEach(t => {
                      const opt = document.createElement('option');
                      opt.value = t.name;  // tu login espera tenantName = string
                      opt.text  = t.name;
                      tenantNameSelect.appendChild(opt);
                    });
                  })
                  .catch(err => {
                    console.error('Error cargando tenants públicos:', err);
                  });
            }
        } else {
            // ocultar para Central
            tenantNameSelect.style.display = 'none';
            tenantNameSelect.required     = false;
            tenantNameSelect.selectedIndex = 0;
        }
    }

    // Al cambiar el tipo de usuario
    userTypeSelect.addEventListener('change', handleUserTypeChange);
    // Estado inicial
    handleUserTypeChange();
});
</script>
